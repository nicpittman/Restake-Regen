/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  11155111: {
    RegenPledgeRegistry: {
      address: "0x855839aa63e7218b26c01344a83c3b8c4c1924b6",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "_worldId",
              type: "address",
              internalType: "contract IWorldID",
            },
            {
              name: "_appId",
              type: "string",
              internalType: "string",
            },
            {
              name: "_actionId",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "makePledge",
          inputs: [
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "pledges",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "usedNullifiers",
          inputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
      ],
      inheritedFunctions: {},
    },
    RegenChallengeManager: {
      address: "0xb83dbc74d715b1679352016e61b53c2c766f1a2f",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "_router",
              type: "address",
              internalType: "address",
            },
            {
              name: "_pledgeRegistry",
              type: "address",
              internalType: "contract RegenPledgeRegistry",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "ccipReceive",
          inputs: [
            {
              name: "message",
              type: "tuple",
              internalType: "struct Client.Any2EVMMessage",
              components: [
                {
                  name: "messageId",
                  type: "bytes32",
                  internalType: "bytes32",
                },
                {
                  name: "sourceChainSelector",
                  type: "uint64",
                  internalType: "uint64",
                },
                {
                  name: "sender",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "data",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "destTokenAmounts",
                  type: "tuple[]",
                  internalType: "struct Client.EVMTokenAmount[]",
                  components: [
                    {
                      name: "token",
                      type: "address",
                      internalType: "address",
                    },
                    {
                      name: "amount",
                      type: "uint256",
                      internalType: "uint256",
                    },
                  ],
                },
              ],
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "getRouter",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "initialize",
          inputs: [
            {
              name: "_serviceManager",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "pledgeRegistry",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract RegenPledgeRegistry",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "serviceManager",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract RegenServiceManager",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "supportsInterface",
          inputs: [
            {
              name: "interfaceId",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "event",
          name: "SlashAttemptFailed",
          inputs: [
            {
              name: "operator",
              type: "address",
              indexed: false,
              internalType: "address",
            },
            {
              name: "amount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "SlashSuccessful",
          inputs: [
            {
              name: "operator",
              type: "address",
              indexed: false,
              internalType: "address",
            },
            {
              name: "amount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "InvalidRouter",
          inputs: [
            {
              name: "router",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {},
    },
    RegenServiceManager: {
      address: "0x0f8bd07823b8ceb46025592e852430edc3e07a6c",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "_challengeManager",
              type: "address",
              internalType: "contract RegenChallengeManager",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "challengeManager",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract RegenChallengeManager",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "freezeOperator",
          inputs: [
            {
              name: "operatorAddr",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
      ],
      inheritedFunctions: {},
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
